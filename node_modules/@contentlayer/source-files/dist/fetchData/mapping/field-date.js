import * as tracing_1 from "@effect-ts/core/Tracing";
const fileName_1 = "packages/@contentlayer/source-files/src/fetchData/mapping/field-date.ts";
import { Temporal } from '@contentlayer/utils';
import { pipe, T } from '@contentlayer/utils/effect';
import { FetchDataError } from '../../errors/index.js';
export const makeDateField = ({ dateString, fieldName, options, }) => (T.catchAll_(T.try(() => {
    const dateHasExplitcitTimezone = () => {
        try {
            Temporal.TimeZone.from(dateString);
            return true;
        }
        catch {
            return false;
        }
    };
    // See Temporal docs https://tc39.es/proposal-temporal/docs/
    if (options.date?.timezone !== undefined && dateHasExplitcitTimezone() === false) {
        const instant = new Date(dateString).toTemporalInstant();
        const desiredTimezone = Temporal.TimeZone.from(options.date.timezone);
        const offsetNs = desiredTimezone.getOffsetNanosecondsFor(instant);
        return instant.subtract({ nanoseconds: offsetNs }).toString();
    }
    else {
        return new Date(dateString).toISOString();
    }
}, fileName_1 + ":17:10"), () => FetchDataError.IncompatibleFieldDataError.fail({ incompatibleFieldData: [[fieldName, dateString]] }), fileName_1 + ":38:15"));
//# sourceMappingURL=field-date.js.map