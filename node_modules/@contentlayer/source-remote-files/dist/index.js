import * as tracing_1 from "@effect-ts/core/Tracing";
const fileName_1 = "packages/@contentlayer/source-remote-files/src/index.ts";
import * as core from '@contentlayer/core';
import * as SourceFiles from '@contentlayer/source-files';
import { unknownToAbsolutePosixFilePath } from '@contentlayer/utils';
import { M, OT, pipe, S, T } from '@contentlayer/utils/effect';
export const makeSource = async (rawArgs) => {
    const { restArgs: { syncFiles, ...args }, } = await core.processArgs(rawArgs);
    const sourcePlugin = await SourceFiles.makeSource(rawArgs);
    return {
        ...sourcePlugin,
        fetchData: (fetchDataArgs) => (S.unwrapManaged(M.gen(function* ($) {
            const contentDirPath = yield* $((T.map_(core.getCwd, (cwd) => unknownToAbsolutePosixFilePath(args.contentDirPath, cwd), fileName_1 + ":30:20")), fileName_1 + ":27:42");
            // TODO acutally cancel the syncing when the process is terminated
            const cancelRemoteSyncing = yield* $((OT.withSpan('syncFiles')(T.tryPromiseOrDie(() => syncFiles(contentDirPath)))), fileName_1 + ":35:47");
            yield* $(M.finalizer(T.sync(() => cancelRemoteSyncing()), fileName_1 + ":42:31"), fileName_1 + ":42:19");
            return sourcePlugin.fetchData(fetchDataArgs);
        }))),
    };
};
//# sourceMappingURL=index.js.map